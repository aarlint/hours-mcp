name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

  build-check:
    name: Build Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build for current platform
      run: |
        go mod download
        go build -v .

    - name: Cross-compile check
      run: |
        # Test cross-compilation for major platforms
        GOOS=darwin GOARCH=amd64 go build -o /tmp/hours-mcp-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -o /tmp/hours-mcp-darwin-arm64 .
        GOOS=linux GOARCH=amd64 go build -o /tmp/hours-mcp-linux-amd64 .
        GOOS=windows GOARCH=amd64 go build -o /tmp/hours-mcp-windows-amd64.exe .
        echo "âœ… All cross-compilation targets build successfully"