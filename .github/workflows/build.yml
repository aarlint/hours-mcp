name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run tests
      run: |
        go mod download
        go test -v ./...

  build:
    name: Build binaries
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - goos: darwin
            goarch: amd64
            name: hours-mcp-darwin-amd64
          - goos: darwin
            goarch: arm64
            name: hours-mcp-darwin-arm64
          - goos: linux
            goarch: amd64
            name: hours-mcp-linux-amd64
          - goos: linux
            goarch: arm64
            name: hours-mcp-linux-arm64
          - goos: windows
            goarch: amd64
            name: hours-mcp-windows-amd64.exe

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        # Install cross-compilation dependencies for CGO
        if [ "${{ matrix.goos }}" = "linux" ]; then
          sudo apt-get update
          sudo apt-get install -y gcc-multilib
          if [ "${{ matrix.goarch }}" = "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
            export CC=aarch64-linux-gnu-gcc
          fi
        elif [ "${{ matrix.goos }}" = "darwin" ]; then
          # For Darwin builds on Linux, we need osxcross or disable CGO
          export CGO_ENABLED=0
        elif [ "${{ matrix.goos }}" = "windows" ]; then
          sudo apt-get install -y gcc-mingw-w64
          export CC=x86_64-w64-mingw32-gcc
        fi

        go mod download
        go build -ldflags="-s -w" -o ${{ matrix.name }} .

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Create release notes
      id: release_notes
      run: |
        echo "## Hours MCP Release ${{ github.ref_name }}" > release_notes.md
        echo "" >> release_notes.md
        echo "### Download the appropriate binary for your platform:" >> release_notes.md
        echo "" >> release_notes.md
        echo "- **macOS (Apple Silicon)**: \`hours-mcp-darwin-arm64\`" >> release_notes.md
        echo "- **macOS (Intel)**: \`hours-mcp-darwin-amd64\`" >> release_notes.md
        echo "- **Linux (x64)**: \`hours-mcp-linux-amd64\`" >> release_notes.md
        echo "- **Linux (ARM64)**: \`hours-mcp-linux-arm64\`" >> release_notes.md
        echo "- **Windows (x64)**: \`hours-mcp-windows-amd64.exe\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Installation:" >> release_notes.md
        echo "" >> release_notes.md
        echo "1. Download the binary for your platform" >> release_notes.md
        echo "2. Make it executable: \`chmod +x hours-mcp-*\`" >> release_notes.md
        echo "3. Move to your PATH: \`mv hours-mcp-* ~/.local/bin/hours-mcp\`" >> release_notes.md
        echo "4. Configure Claude Desktop (see README.md)" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Features:" >> release_notes.md
        echo "- üéØ Contract-based professional billing" >> release_notes.md
        echo "- üìÑ PDF invoice generation with business branding" >> release_notes.md
        echo "- üë• Complete recipient management" >> release_notes.md
        echo "- ‚è±Ô∏è 15-minute precision time tracking" >> release_notes.md
        echo "- üó£Ô∏è Natural language time entry" >> release_notes.md
        echo "- üèóÔ∏è Professional database architecture with migrations" >> release_notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release_notes.md
        files: ./artifacts/*/hours-mcp-*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  latest-build:
    name: Latest Build (main branch)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Update latest release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: latest
        name: "Latest Build (Development)"
        body: |
          ## Latest Development Build

          ‚ö†Ô∏è **Development Build** - Use at your own risk!

          This is an automatic build from the latest code on the main branch.
          For stable releases, use the versioned releases instead.

          ### Download:
          - **macOS (Apple Silicon)**: `hours-mcp-darwin-arm64`
          - **macOS (Intel)**: `hours-mcp-darwin-amd64`
          - **Linux (x64)**: `hours-mcp-linux-amd64`
          - **Linux (ARM64)**: `hours-mcp-linux-arm64`
          - **Windows (x64)**: `hours-mcp-windows-amd64.exe`
        files: ./artifacts/*/hours-mcp-*
        draft: false
        prerelease: true
        make_latest: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}